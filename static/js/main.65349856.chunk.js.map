{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","Textform","useState","text","setText","style","color","heading","value","onChange","event","target","background","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","charAt","slice","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","Alert","height","alert","role","word","lower","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.65349856.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n// import React, { useState } from 'react';\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n        </li> */}\r\n        </ul>\r\n        \r\n         \r\n      \r\n      <div className={`form-check form-switch text-${props.mode==='light'? 'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\nNavbar.propTypes={title:PropTypes.string.isRequired,\r\n                  aboutText:PropTypes.string.isRequired}\r\n\r\nNavbar.defaultProps={\r\n    title:'Set title here',\r\n    aboutText:'About '\r\n};","import React,{useState} from 'react'\r\n\r\n\r\n\r\n//The heart of every React component is its “state”, an object that determines how that component renders & behaves. In other words, “state” is what allows you to create components that are dynamic and interactive.\r\n\r\n//--------------\r\n\r\n//React allows us to pass information to a Component using something called props (stands for properties). Props are basically kind of global variable or object. We will learn about these in detail in this article. Passing and Accessing props. We can pass props to any component as we declare attributes for any HTML tag.\r\n\r\nexport default function Textform(props) {\r\n    \r\n    const handleUpClick =()=>{\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to uppercase !\",\"success\");\r\n    }\r\n    const handleLoClick =()=>{\r\n        \r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        \r\n        props.showAlert(\"converted to lowercase !\",\"success\");\r\n    }\r\n\r\n    const clearText =()=>{\r\n        \r\n        let newText=\"\"\r\n        setText(newText);\r\n        props.showAlert(\"Text has been cleared\",\"success\");\r\n    }\r\n\r\n    const sentenceCase =()=>{\r\n        \r\n        let newText=text.charAt(0).toUpperCase()+text.slice(1);\r\n        setText(newText);\r\n        props.showAlert(\"converted to sentancecase!\",\"success\");\r\n    }\r\n    const handleCopy =()=>{\r\n        let text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();//selected text diselect ho jayega\r\n        props.showAlert(\"text has been copied\",\"success\");\r\n        \r\n\r\n        \r\n\r\n    }\r\n\r\n    const handleOnChange =(event)=>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleExtraSpaces =() =>{\r\n        let newText =text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"extra space has been removed\",\"success\");\r\n    }\r\n    const [text,setText]=useState('');// state variable\r\n    // text=\"new text\"; //Wrong way to change the state\r\n    // setText(\"new  text\");//Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'? 'white':'#042743'}}>\r\n             <h1 className= 'mb-2'> {props.heading}</h1>          \r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value= {text} onChange={handleOnChange} style={{background:props.mode==='dark'? '#13466e':'white',color: props.mode==='dark'? 'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to uppercase</button>\r\n        \r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>convert to lowercase</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={clearText}>Clear Text</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={sentenceCase}>convert to sentencecase</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary my-1 my-1\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'? 'white':'#042743'}}>\r\n            <h1>Your text summary</h1>\r\n            <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length}words and {text.length} characters</p>\r\n            <p>{0.008* text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read </p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview\"}</p>\r\n        </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n      { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n       \r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\n\n\nimport './App.css';\n\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n  \n// } from \"react-router-dom\";\n\n\n\n\n\n//app.js meri puri site hai we also make additional component and add into our site\n\n// curly braces ke andar jo bhi cheez hai usko js mana jaayega\nfunction App() {\n  const [mode, setMode] = useState('light');//whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n  //alert kya hai :alert phele null tha par abhi object hai\n\n  const showAlert =(message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n\n\n  }\n\n  const togglemode = ()=>{\n    if(mode ==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#042743';\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      // document.title ='TextUtils -Dark Mode';\n      // setInterval(() => {\n      //   document.title ='TextUtils is Amazing ';\n        \n      // }, 2000);\n      // setInterval(() => {\n      //   document.title ='Install TextUtils Now';\n        \n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n      // document.title ='TextUtils -Light Mode';\n    }\n  }\n  return (\n    //if we are using jsx in react then we can only return only one element. In this case it is div\n    //title=\"Textutlis matlab mai props pass kar raha hoon\"\n    //props are properties basically the variables in the component \n    // as a props mai apan string ,object aur link bhi pass kar sakte hai\n    <>\n    {/* <Router> */}\n <Navbar title =\"TextUtils\" mode={mode} toggleMode={togglemode}/>\n {/* alert ke ander state variable pass kiya */}\n <Alert alert={alert}/>\n {/* <Navbar /> */}\n <div className=\"container my-3\">\n {/* <Switch> */}\n   {/* { use of exact */}\n   {/* /* /users ---> Component\n    /users/home  --->Component -2 */} \n          {/* <Route exact path=\"/about\"> */}\n            {/* <About mode={mode}/> */}\n          {/* </Route> */}\n          \n          {/* <Route exact path=\"/\"> */}\n           <Textform  showAlert={showAlert}heading=\"Try TextUtils-Word counter,character counter,Remove extra spaces\" mode={mode}/>\n          {/* </Route> */}\n  {/* </Switch> */}\n \n {/* <About/> */}\n </div>\n {/* </Router> */}\n\n   </>\n    \n\n    \n  );\n  // the whole code in the return bracket is jsx\n  //bole to ek html jisne js ka mask phena hua hai\n  //jsx js ka ek syntax extension hai\n  //<></>:This is called as jsx fragment\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}